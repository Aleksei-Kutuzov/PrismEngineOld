<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_d_l___g_l_renderer_8cpp_source" xml:lang="ru">
<title>SDL_GLRenderer.cpp</title>
<indexterm><primary>C:/Users/Admin/Desktop/PrismEngine/PrismEngine/src/PRISM_rendering/SDL_GLRenderer.cpp</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__s_d_l___g_l_renderer_8h">SDL_GLRenderer.h</link>&quot;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00002"/>00002 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00003"/>00003 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00004"/>00004 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00005"/><link linkend="__s_d_l___g_l_renderer_8cpp_1abe3051b82756a48b48a38a1ff2e8789d">00005</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__s_d_l___g_l_renderer_8cpp_1abe3051b82756a48b48a38a1ff2e8789d">initOpenGL</link>(GLuint&#32;shaderProgram,&#32;GLuint&#32;vbo)&#32;{
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Шейдеры&#32;вершин&#32;и&#32;фрагментов</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;vertexShaderSource&#32;=&#32;R<emphasis role="stringliteral">&quot;(</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00008"/>00008 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;attribute&#32;vec4&#32;aPosition;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00009"/>00009 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniform&#32;mat4&#32;uMVPMatrix;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00010"/>00010 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;main()&#32;{</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00011"/>00011 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gl_Position&#32;=&#32;uMVPMatrix&#32;*&#32;aPosition;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00012"/>00012 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00013"/>00013 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;)&quot;;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00014"/>00014 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00015"/>00015 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;fragmentShaderSource&#32;=&#32;R<emphasis role="stringliteral">&quot;(</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00016"/>00016 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;precision&#32;mediump&#32;float;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00017"/>00017 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;main()&#32;{</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00018"/>00018 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gl_FragColor&#32;=&#32;vec4(1.0,&#32;0.0,&#32;0.0,&#32;1.0);&#32;&#32;//&#32;Красный&#32;цвет</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00019"/>00019 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00020"/>00020 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;)&quot;;</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00021"/>00021 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00022"/>00022 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Компиляция&#32;и&#32;привязка&#32;шейдеров</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;GLuint&#32;vertexShader&#32;=&#32;glCreateShader(GL_VERTEX_SHADER);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;glShaderSource(vertexShader,&#32;1,&#32;&amp;vertexShaderSource,&#32;NULL);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;glCompileShader(vertexShader);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00026"/>00026 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;GLuint&#32;fragmentShader&#32;=&#32;glCreateShader(GL_FRAGMENT_SHADER);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;glShaderSource(fragmentShader,&#32;1,&#32;&amp;fragmentShaderSource,&#32;NULL);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;glCompileShader(fragmentShader);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00030"/>00030 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;shaderProgram&#32;=&#32;glCreateProgram();
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;glAttachShader(shaderProgram,&#32;vertexShader);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;glAttachShader(shaderProgram,&#32;fragmentShader);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;glLinkProgram(shaderProgram);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00035"/>00035 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;glDeleteShader(vertexShader);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;glDeleteShader(fragmentShader);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00038"/>00038 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Создаем&#32;VBO&#32;для&#32;хранения&#32;вершин</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;glGenBuffers(1,&#32;&amp;vbo);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00041"/>00041 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00043"/>00043 }
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00044"/>00044 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00045"/>00045 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00046"/>00046 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00047"/>00047 <emphasis role="comment">//void&#32;cleanUp()&#32;{</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00048"/>00048 <emphasis role="comment">//&#32;&#32;&#32;&#32;SDL_GL_DeleteContext(glContext);</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00049"/>00049 <emphasis role="comment">//&#32;&#32;&#32;&#32;SDL_DestroyWindow(window);</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00050"/>00050 <emphasis role="comment">//&#32;&#32;&#32;&#32;SDL_Quit();</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00051"/>00051 <emphasis role="comment">//}</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00052"/>00052 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00053"/><link linkend="__s_d_l___g_l_renderer_8cpp_1ae7dab1843865a8aee7e85bc972d68b9f">00053</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__s_d_l___g_l_renderer_8cpp_1ae7dab1843865a8aee7e85bc972d68b9f">drawTriangleWithOpenGL</link>(Vector3d&#32;v1,&#32;Vector3d&#32;v2,&#32;Vector3d&#32;v3,&#32;GLuint&#32;shaderProgram,&#32;GLuint&#32;vbo)&#32;{
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Активация&#32;шейдерной&#32;программы</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;glUseProgram(shaderProgram);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00056"/>00056 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Передача&#32;матрицы&#32;преобразования&#32;(единичная&#32;матрица&#32;для&#32;примера)</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mvpMatrix[16]&#32;=&#32;{
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;0,&#32;0,&#32;0,
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;1,&#32;0,&#32;0,
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;1,&#32;0,
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;0,&#32;1
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;};
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;GLuint&#32;mvpLoc&#32;=&#32;glGetUniformLocation(shaderProgram,&#32;<emphasis role="stringliteral">&quot;uMVPMatrix&quot;</emphasis>);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;glUniformMatrix4fv(mvpLoc,&#32;1,&#32;GL_FALSE,&#32;mvpMatrix);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00066"/>00066 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Передача&#32;вершин&#32;в&#32;VBO</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;Vector3d&#32;vertices[3]&#32;=&#32;{&#32;v1,&#32;v2,&#32;v3&#32;};
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;glBindBuffer(GL_ARRAY_BUFFER,&#32;vbo);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;glBufferData(GL_ARRAY_BUFFER,&#32;<emphasis role="keyword">sizeof</emphasis>(vertices),&#32;vertices,&#32;GL_DYNAMIC_DRAW);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00071"/>00071 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Настройка&#32;атрибута&#32;позиции</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;GLuint&#32;positionLoc&#32;=&#32;glGetAttribLocation(shaderProgram,&#32;<emphasis role="stringliteral">&quot;aPosition&quot;</emphasis>);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;glEnableVertexAttribArray(positionLoc);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;glVertexAttribPointer(positionLoc,&#32;4,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;<emphasis role="keyword">sizeof</emphasis>(Vector3d),&#32;(<emphasis role="keywordtype">void</emphasis>*)0);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00076"/>00076 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Рисуем&#32;треугольник</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;glDrawArrays(GL_TRIANGLES,&#32;0,&#32;3);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00079"/>00079 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Отключаем&#32;атрибуты&#32;после&#32;отрисовки</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;glDisableVertexAttribArray(positionLoc);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00082"/>00082 
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Отключение&#32;шейдера</emphasis>
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;glUseProgram(0);
<anchor xml:id="__s_d_l___g_l_renderer_8cpp_source_1l00085"/>00085 }
</programlisting></section>
