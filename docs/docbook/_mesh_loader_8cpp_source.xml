<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__mesh_loader_8cpp_source" xml:lang="ru">
<title>MeshLoader.cpp</title>
<indexterm><primary>C:/Users/Admin/Desktop/PrismEngine/PrismEngine/src/PRISM_objects3D/MeshLoader.cpp</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="__mesh_loader_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__mesh_loader_8h">MeshLoader.h</link>&quot;</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_other_8h">../PRISM_math/other.h</link>&quot;</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00003"/>00003 
<anchor xml:id="__mesh_loader_8cpp_source_1l00004"/>00004 
<anchor xml:id="__mesh_loader_8cpp_source_1l00005"/><link linkend="_class_mesh_loader_1aa69666419dbf06517d48bc6250f17916">00005</link> <link linkend="_struct_p_r_i_s_m___mesh">PRISM_Mesh</link>&#32;<link linkend="_class_mesh_loader_1aa69666419dbf06517d48bc6250f17916">MeshLoader::LoadOBJ</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;filename,&#32;<link linkend="_class_abstract_camera3_d">AbstractCamera3D</link>&#32;camera)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;SDL_RWops*&#32;file&#32;=&#32;SDL_RWFromFile(filename,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
<anchor xml:id="__mesh_loader_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;
<anchor xml:id="__mesh_loader_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___mesh">PRISM_Mesh</link>&#32;mesh&#32;=&#32;{};
<anchor xml:id="__mesh_loader_8cpp_source_1l00009"/>00009 
<anchor xml:id="__mesh_loader_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(<emphasis role="stringliteral">&quot;Could&#32;not&#32;open&#32;file:&#32;%s&quot;</emphasis>,&#32;SDL_GetError());
<anchor xml:id="__mesh_loader_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mesh;
<anchor xml:id="__mesh_loader_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00014"/>00014 
<anchor xml:id="__mesh_loader_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;Sint64&#32;fileSize&#32;=&#32;SDL_RWsize(file);
<anchor xml:id="__mesh_loader_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[fileSize&#32;+&#32;1];
<anchor xml:id="__mesh_loader_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;SDL_RWread(file,&#32;buffer,&#32;fileSize,&#32;1);
<anchor xml:id="__mesh_loader_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;buffer[fileSize]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="__mesh_loader_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;
<anchor xml:id="__mesh_loader_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__mesh_loader_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;std::istringstream&#32;fileContent(buffer);
<anchor xml:id="__mesh_loader_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;
<anchor xml:id="__mesh_loader_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;std::vector&lt;PRISM_Vector3d&gt;&#32;vertices;
<anchor xml:id="__mesh_loader_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;std::vector&lt;PRISM_Vector3d&gt;&#32;normals;
<anchor xml:id="__mesh_loader_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;std::vector&lt;PRISM_Triangle&gt;&#32;triangles;
<anchor xml:id="__mesh_loader_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;
<anchor xml:id="__mesh_loader_8cpp_source_1l00027"/>00027 
<anchor xml:id="__mesh_loader_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;mesh.<link linkend="_struct_p_r_i_s_m___mesh_1ac393379bc7f471ceca77be5b67626168">tris</link>&#32;=&#32;{};
<anchor xml:id="__mesh_loader_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(getline(fileContent,&#32;line))&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.empty()&#32;||&#32;line[0]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;Пропускаем&#32;пустые&#32;строки&#32;и&#32;комментарии</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00033"/>00033 
<anchor xml:id="__mesh_loader_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="__mesh_loader_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;identifier;
<anchor xml:id="__mesh_loader_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iss&#32;&gt;&gt;&#32;identifier;
<anchor xml:id="__mesh_loader_8cpp_source_1l00037"/>00037 
<anchor xml:id="__mesh_loader_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(identifier&#32;==&#32;<emphasis role="stringliteral">&quot;v&quot;</emphasis>)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Вершина</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v;
<anchor xml:id="__mesh_loader_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iss&#32;&gt;&gt;&#32;v.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;&gt;&gt;&#32;v.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;&gt;&gt;&#32;v.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__mesh_loader_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices.push_back(v);
<anchor xml:id="__mesh_loader_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(identifier&#32;==&#32;<emphasis role="stringliteral">&quot;vn&quot;</emphasis>)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Нормаль</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;n;
<anchor xml:id="__mesh_loader_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iss&#32;&gt;&gt;&#32;n.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;&gt;&gt;&#32;n.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;&gt;&gt;&#32;n.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__mesh_loader_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normals.push_back(n);
<anchor xml:id="__mesh_loader_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(identifier&#32;==&#32;<emphasis role="stringliteral">&quot;f&quot;</emphasis>)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Грань</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;vertexIndices;
<anchor xml:id="__mesh_loader_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;normalIndices;
<anchor xml:id="__mesh_loader_8cpp_source_1l00054"/>00054 
<anchor xml:id="__mesh_loader_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;facePart;
<anchor xml:id="__mesh_loader_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;facePart)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Разбиваем&#32;каждую&#32;часть&#32;грани&#32;(например,&#32;&quot;1//1&quot;&#32;или&#32;&quot;1/1/1&quot;)</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;firstSlash&#32;=&#32;facePart.find(<emphasis role="charliteral">&apos;/&apos;</emphasis>);
<anchor xml:id="__mesh_loader_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;secondSlash&#32;=&#32;facePart.find(<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;firstSlash&#32;+&#32;1);
<anchor xml:id="__mesh_loader_8cpp_source_1l00060"/>00060 
<anchor xml:id="__mesh_loader_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Извлекаем&#32;индекс&#32;вершины&#32;(до&#32;первого&#32;&apos;/&apos;)</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertexIndex&#32;=&#32;std::stoi(facePart.substr(0,&#32;firstSlash))&#32;-&#32;1;
<anchor xml:id="__mesh_loader_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertexIndices.push_back(vertexIndex);
<anchor xml:id="__mesh_loader_8cpp_source_1l00064"/>00064 
<anchor xml:id="__mesh_loader_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Проверяем,&#32;есть&#32;ли&#32;индекс&#32;нормали&#32;(после&#32;второго&#32;&apos;/&apos;)</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(secondSlash&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;normalIndex&#32;=&#32;std::stoi(facePart.substr(secondSlash&#32;+&#32;1))&#32;-&#32;1;
<anchor xml:id="__mesh_loader_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalIndices.push_back(normalIndex);
<anchor xml:id="__mesh_loader_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Создаем&#32;треугольник,&#32;если&#32;индексы&#32;вершин&#32;определены</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vertexIndices.size()&#32;==&#32;3)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;tri&#32;=&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices[vertexIndices[0]],
<anchor xml:id="__mesh_loader_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices[vertexIndices[1]],
<anchor xml:id="__mesh_loader_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices[vertexIndices[2]]
<anchor xml:id="__mesh_loader_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__mesh_loader_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Если&#32;указаны&#32;нормали,&#32;добавляем&#32;их&#32;в&#32;треугольник</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!normalIndices.empty()&#32;&amp;&amp;&#32;normalIndices.size()&#32;==&#32;3)&#32;{
<anchor xml:id="__mesh_loader_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tri.<link linkend="_struct_p_r_i_s_m___triangle_1a1d4a7b3b2f67d1c45e08010317b4b4bc">a_norlmal</link>&#32;=&#32;normals[normalIndices[0]];
<anchor xml:id="__mesh_loader_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tri.<link linkend="_struct_p_r_i_s_m___triangle_1a41b34676271f1d1f9e7a457d301cf75c">b_norlmal</link>&#32;=&#32;normals[normalIndices[1]];
<anchor xml:id="__mesh_loader_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tri.<link linkend="_struct_p_r_i_s_m___triangle_1aea1c66594ed2f5bb0423abbcb8fc003e">c_norlmal</link>&#32;=&#32;normals[normalIndices[2]];
<anchor xml:id="__mesh_loader_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Добавляем&#32;треугольник&#32;в&#32;объект</emphasis>
<anchor xml:id="__mesh_loader_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mesh.<link linkend="_struct_p_r_i_s_m___mesh_1ac393379bc7f471ceca77be5b67626168">tris</link>.push_back(tri);
<anchor xml:id="__mesh_loader_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="__mesh_loader_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
<anchor xml:id="__mesh_loader_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;SDL_RWclose(file);
<anchor xml:id="__mesh_loader_8cpp_source_1l00091"/>00091 
<anchor xml:id="__mesh_loader_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mesh;
<anchor xml:id="__mesh_loader_8cpp_source_1l00093"/>00093 };
</programlisting></section>
