<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__abstract_object3_d_8cpp_source" xml:lang="ru">
<title>AbstractObject3D.cpp</title>
<indexterm><primary>C:/Users/Admin/Desktop/PrismEngine/PrismEngine/src/PRISM_objects3D/AbstractObject3D.cpp</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="__abstract_object3_d_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__abstract_object3_d_8h">AbstractObject3D.h</link>&quot;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00002"/>00002 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00003"/>00003 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00004"/><link linkend="_class_abstract_object3_d_1a7f14d00efaf40da5c8043c79ed98fb3a">00004</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a7f14d00efaf40da5c8043c79ed98fb3a">AbstractObject3D::SetMesh</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___mesh">PRISM_Mesh</link>&#32;m)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a4707653e32d90b220c3c6321f2666576">mesh</link>&#32;=&#32;m;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00006"/>00006 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00007"/>00007 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00008"/><link linkend="_class_abstract_object3_d_1a68d647bcabda18f6d7b26b36b311933b">00008</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_p_r_i_s_m___mesh">PRISM_Mesh</link>&#32;<link linkend="_class_abstract_object3_d_1ad61479c28632698d4c682374d81c91f0">AbstractObject3D</link>::<link linkend="_class_abstract_object3_d_1a68d647bcabda18f6d7b26b36b311933b">GetMesh</link>()&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a4707653e32d90b220c3c6321f2666576">mesh</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00010"/>00010 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00011"/>00011 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00012"/><link linkend="_class_abstract_object3_d_1a04fcc82bc4f28822ff74b59fe1a6f4ba">00012</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a04fcc82bc4f28822ff74b59fe1a6f4ba">AbstractObject3D::InitProjection</link>(<link linkend="_class_abstract_camera3_d">AbstractCamera3D</link>&#32;camera)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a4a0043af98800a2c0517cfe81c9423c6">ProjectionMatrix</link>&#32;=&#32;<link linkend="_class_math_1aefb90ca08abcfdab52cf22b771c5493b">Math::Matrix_MakeProjection</link>(camera.<link linkend="_class_abstract_camera3_d_1aea507545ff67cf3068a42c3da2802482">FFovRad</link>,&#32;camera.<link linkend="_class_abstract_camera3_d_1a1e3414c56d4b2bff47c9587c37dfa388">FAspectRatio</link>,&#32;camera.<link linkend="_class_abstract_camera3_d_1abe61468f5c3769409d3a544b1e871ba4">FNear</link>,&#32;camera.<link linkend="_class_abstract_camera3_d_1a33d38c1fa77a9c65fb84d6db924aadeb">FFar</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a62a770b3680bca1269d59b9992144650">ScreenW</link>&#32;=&#32;(float)camera.<link linkend="_class_abstract_camera3_d_1a998fcbfaf0e79f12b768a1a509414d48">ScreenW</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1af273480bb7b551fe2359b8f4b23a084b">ScreenH</link>&#32;=&#32;(float)camera.<link linkend="_class_abstract_camera3_d_1a95ac9b29beb28d30685937df8ddd8630">ScreenH</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>&#32;=&#32;camera;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00017"/>00017 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00018"/>00018 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00019"/><link linkend="_class_abstract_object3_d_1a4715d4206facdace0d0ffe1efc81ae96">00019</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a4715d4206facdace0d0ffe1efc81ae96">AbstractObject3D::SetRotateXYZ</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;rotVect)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1accfed9da2d822544527e3a911ff58616">Rotation</link>&#32;=&#32;rotVect;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;=&#32;<link linkend="_class_math_1aa2160fa016d0ebc03a56f054e0c48ad9">Math::degToRad</link>(rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;=&#32;<link linkend="_class_math_1aa2160fa016d0ebc03a56f054e0c48ad9">Math::degToRad</link>(rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;=&#32;<link linkend="_class_math_1aa2160fa016d0ebc03a56f054e0c48ad9">Math::degToRad</link>(rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotation&#32;X</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;matrixRotX&#32;=&#32;<link linkend="_class_math_1a751e8ee04fa36ec2a7c2cf65388db388">Math::Matrix_MakeRotationX</link>(rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00027"/>00027 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotation&#32;Y</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;matrixRotY&#32;=&#32;<link linkend="_class_math_1a6e4af6c5bcd41db2091def1a8dd24197">Math::Matrix_MakeRotationY</link>(rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotation&#32;Z</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;matrixRotZ&#32;=&#32;<link linkend="_class_math_1a2b159f7588ac3cbca1fba25ccb72cda3">Math::Matrix_MakeRotationZ</link>(rotVect.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00033"/>00033 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00034"/>00034 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00035"/><link linkend="_class_abstract_object3_d_1a57c9fd28f17b11451e6c5d36db536bfb">00035</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a57c9fd28f17b11451e6c5d36db536bfb">AbstractObject3D::SetMoveXYZ</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;moveVect)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1ae2a63d044e2f5ebcacde18dd6edf8ef1">Coordinate</link>&#32;=&#32;moveVect;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;matrixTranslate&#32;=&#32;<link linkend="_class_math_1ade6dadea627fe29eff89bb5ea86cf4b8">Math::Matrix_MakeTranslation</link>(moveVect.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;moveVect.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;moveVect.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00038"/>00038 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00039"/>00039 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00040"/><link linkend="_class_abstract_object3_d_1acde3b9eb0b43bfd343a18f444526bc15">00040</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1acde3b9eb0b43bfd343a18f444526bc15">AbstractObject3D::SetScaleXYZ</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;scaleVect)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a314c8b4cf5c683fc6b2dab2d65ace32a">Scale</link>&#32;=&#32;scaleVect;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;matrixScale&#32;=&#32;<link linkend="_class_math_1a3abc383f85ec5784f5006579496d8a29">Math::Matrix_MakeScale</link>(scaleVect.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;scaleVect.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;scaleVect.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00043"/>00043 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00044"/>00044 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00045"/><link linkend="_class_abstract_object3_d_1a41d0a75667c7fe1e67defd8689fc4e73">00045</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a41d0a75667c7fe1e67defd8689fc4e73">AbstractObject3D::PrintInfo</link>()
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00046"/>00046 {
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;SDL_Log(<emphasis role="stringliteral">&quot;PRISM_ENGINE::PRISM_objects::AbstractObject3D\n\tMoveXYZ:&#32;%f,&#32;%f,&#32;%f\n\tRotateXYZ:&#32;%f,&#32;%f,&#32;%f\n\tScaleXYZ:&#32;%f,&#32;%f,&#32;%f&quot;</emphasis>,&#32;<link linkend="_class_abstract_object3_d_1ae2a63d044e2f5ebcacde18dd6edf8ef1">Coordinate</link>.x,&#32;<link linkend="_class_abstract_object3_d_1ae2a63d044e2f5ebcacde18dd6edf8ef1">Coordinate</link>.y,&#32;<link linkend="_class_abstract_object3_d_1ae2a63d044e2f5ebcacde18dd6edf8ef1">Coordinate</link>.z,
<anchor xml:id="__abstract_object3_d_8cpp_source_1llink linkend="_class_abstract_object3_d_1accfed9da2d822544527e3a911ff58616">Rotation</link>.x,&#32;<link linkend="_class_abstract_object3_d_1accfed9da2d822544527e3a911ff58616">Rotation</link>.y,&#32;<link linkend="_class_abstract_object3_d_1accfed9da2d822544527e3a911ff58616">Rotation</link>.z,
<anchor xml:id="__abstract_object3_d_8cpp_source_1llink linkend="_class_abstract_object3_d_1a314c8b4cf5c683fc6b2dab2d65ace32a">Scale</link>.x,&#32;<link linkend="_class_abstract_object3_d_1a314c8b4cf5c683fc6b2dab2d65ace32a">Scale</link>.y,&#32;<link linkend="_class_abstract_object3_d_1a314c8b4cf5c683fc6b2dab2d65ace32a">Scale</link>.z);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00050"/>00050 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00051"/>00051 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00052"/><link linkend="_class_abstract_object3_d_1a9371debf5f3a1c8e5c72503c1c173e64">00052</link> <link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;<link linkend="_class_abstract_object3_d_1a9371debf5f3a1c8e5c72503c1c173e64">AbstractObject3D::RotateTriangle</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;Triangle_)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;TriangleRotatedZ,&#32;TriangleRotatedZX,&#32;TriangleRotatedZXY;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotate&#32;in&#32;Z-Axis</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleRotatedZ.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;matrixRotZ);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleRotatedZ.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;matrixRotZ);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleRotatedZ.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;matrixRotZ);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotate&#32;in&#32;X-Axis</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleRotatedZ.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleRotatedZX.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;matrixRotX);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleRotatedZ.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleRotatedZX.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;matrixRotX);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleRotatedZ.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleRotatedZX.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;matrixRotX);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotate&#32;in&#32;Y-Axis</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleRotatedZX.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleRotatedZXY.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;matrixRotY);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleRotatedZX.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleRotatedZXY.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;matrixRotY);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleRotatedZX.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleRotatedZXY.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;matrixRotY);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TriangleRotatedZXY;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00069"/>00069 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00070"/>00070 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00071"/><link linkend="_class_abstract_object3_d_1a33ee4ea92fb858c1e19a5a420ac13441">00071</link> <link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;<link linkend="_class_abstract_object3_d_1a33ee4ea92fb858c1e19a5a420ac13441">AbstractObject3D::TranslateTriangle</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;Triangle_)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;TriangleTranslated;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleTranslated.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;matrixTranslate);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleTranslated.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;matrixTranslate);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleTranslated.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;matrixTranslate);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TriangleTranslated;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00078"/>00078 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00079"/>00079 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00080"/><link linkend="_class_abstract_object3_d_1a4b37b8ef005ab4f79090c4d87b326801">00080</link> <link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;<link linkend="_class_abstract_object3_d_1a4b37b8ef005ab4f79090c4d87b326801">AbstractObject3D::ScaleTriangle</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;Triangle_)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;TriangleScaled;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleScaled.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;matrixScale);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleScaled.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;matrixScale);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleScaled.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;matrixScale);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TriangleScaled;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00087"/>00087 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00088"/>00088 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00089"/><link linkend="_class_abstract_object3_d_1ab9373b601dba85585b99518343d302ef">00089</link> <link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;<link linkend="_class_abstract_object3_d_1ab9373b601dba85585b99518343d302ef">AbstractObject3D::ViewTriangle</link>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;Triangle_)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;TriangleViewed;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.matrixView);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.matrixView);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(Triangle_.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.matrixView);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TriangleViewed;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00096"/>00096 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00097"/>00097 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00098"/>00098 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00099"/>00099 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00100"/><link linkend="_class_abstract_object3_d_1af3834cbcf99a19ee555b0acbdfe334bc">00100</link> <link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;<link linkend="_class_abstract_object3_d_1af3834cbcf99a19ee555b0acbdfe334bc">AbstractObject3D::CalculatePhongShadingColor</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;normal,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;viewDir,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&amp;&#32;light,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;fragPos)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ambient&#32;component</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ambientStrength&#32;=&#32;0.1f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;ambient&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;*&#32;ambientStrength),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;*&#32;ambientStrength),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;*&#32;ambientStrength),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Light&#32;direction&#32;(from&#32;fragment&#32;position&#32;to&#32;light&#32;position)</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;lightDir&#32;=&#32;{&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;fragPos.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;fragPos.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;-&#32;fragPos.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lightLen&#32;=&#32;sqrt(lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;lightDir&#32;=&#32;{&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;/&#32;lightLen,&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;/&#32;lightLen,&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;/&#32;lightLen&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Diffuse&#32;component</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;diff&#32;=&#32;std::max(0.0f,&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;diffuse&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;*&#32;diff),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;*&#32;diff),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;*&#32;diff),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reflect&#32;direction</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;reflectDir&#32;=&#32;{&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;2&#32;*&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;diff,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;2&#32;*&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;diff,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lightDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;-&#32;2&#32;*&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;diff&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;spec&#32;=&#32;std::pow(std::max(0.0f,&#32;reflectDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;viewDir.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+&#32;reflectDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;viewDir.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+&#32;reflectDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;viewDir.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>),&#32;32);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;specular&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;*&#32;spec),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;*&#32;spec),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;*&#32;spec),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Final&#32;color</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;result&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(std::min(255,&#32;ambient.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;+&#32;diffuse.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;+&#32;specular.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>)),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(std::min(255,&#32;ambient.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;+&#32;diffuse.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;+&#32;specular.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>)),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Uint8<emphasis role="keyword">&gt;</emphasis>(std::min(255,&#32;ambient.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;+&#32;diffuse.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;+&#32;specular.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>)),
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00137"/>00137 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00138"/>00138 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00139"/>00139 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00140"/>00140 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Vector3d&#32;CalculateVertexNormal(std::vector&lt;Vector3d&gt;&amp;&#32;normals,&#32;Vector3d&#32;vertex,&#32;SDL_Renderer*&#32;renderer)&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00141"/>00141 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;normals&#32;vector&#32;SIZE:&#32;%d&quot;,&#32;normals.size());</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00142"/>00142 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;normals.size();&#32;i++)&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00143"/>00143 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;normal&#32;&lt;%f&#32;,%f&#32;,%f&gt;&quot;,&#32;normals.at(i).x,&#32;normals.at(i).y,&#32;normals.at(i).z);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00144"/>00144 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00145"/>00145 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00146"/>00146 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3d&#32;normalSum&#32;=&#32;{0,&#32;0,&#32;0};</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00147"/>00147 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;count&#32;=&#32;0;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00148"/>00148 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(Vector3d&amp;&#32;normal&#32;:&#32;normals)&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00149"/>00149 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(normal.x&#32;*&#32;(vertex.x&#32;-&#32;CoordinateCamera.x)&#32;+&#32;//НЕЗАБУДЬ&#32;ПОМЕНЯТЬ&#32;ВЫРООЖЕНИЕ&#32;КОГДА&#32;КАМЕРУ&#32;ДЕЛАТЬ&#32;БУДЕШ&#32;СЕЙЧАС&#32;ТО&#32;ОНА&#32;НА&#32;НУЛЕ</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00150"/>00150 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal.y&#32;*&#32;(vertex.y&#32;-&#32;CoordinateCamera.y)&#32;+</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00151"/>00151 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal.z&#32;*&#32;(vertex.z&#32;-&#32;CoordinateCamera.z)&#32;&lt;&#32;0.0f)&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00152"/>00152 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalSum&#32;=&#32;normalSum&#32;+&#32;normal;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00153"/>00153 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00154"/>00154 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00155"/>00155 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00156"/>00156 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;count:&#32;%d&quot;,&#32;count);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00157"/>00157 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(count&#32;&gt;&#32;0)&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00158"/>00158 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalSum&#32;=&#32;normalSum&#32;*&#32;(1.0f&#32;/&#32;count);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00159"/>00159 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalSum&#32;=&#32;Vector_Normalise(normalSum);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00160"/>00160 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00161"/>00161 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00162"/>00162 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;normalSum:&#32;@&lt;%f,&#32;%f,&#32;%f&gt;@&quot;,&#32;normalSum.x,&#32;normalSum.y,&#32;normalSum.z);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00163"/>00163 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3d&#32;center&#32;=&#32;vertex;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00164"/>00164 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00165"/>00165 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Calculate&#32;end&#32;point&#32;of&#32;the&#32;normal</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00166"/>00166 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3d&#32;normalEnd&#32;=&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00167"/>00167 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center.x&#32;+&#32;normalSum.x,&#32;//&#32;Adjust&#32;length&#32;as&#32;needed</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00168"/>00168 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center.y&#32;+&#32;normalSum.y,</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00169"/>00169 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center.z&#32;+&#32;normalSum.z</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00170"/>00170 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00171"/>00171 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00172"/>00172 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;normalEnd:&#32;@&lt;%f,&#32;%f,&#32;%f&gt;@&quot;,&#32;normalEnd.x,&#32;normalEnd.y,&#32;normalEnd.z);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00173"/>00173 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00174"/>00174 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Project&#32;the&#32;center&#32;and&#32;normal&#32;end&#32;points</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00175"/>00175 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3d&#32;centerProjected,&#32;normalEndProjected;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00176"/>00176 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00177"/>00177 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MultiplyMatrixVector(center,&#32;centerProjected,&#32;ProjectionMatrix);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00178"/>00178 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MultiplyMatrixVector(normalEnd,&#32;normalEndProjected,&#32;ProjectionMatrix);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00179"/>00179 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00180"/>00180 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;centerProjected.x&#32;=&#32;(centerProjected.x&#32;+&#32;1.0f)&#32;*&#32;0.5f&#32;*&#32;(float)ScreenW;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00181"/>00181 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;centerProjected.y&#32;=&#32;(centerProjected.y&#32;+&#32;1.0f)&#32;*&#32;0.5f&#32;*&#32;(float)ScreenH;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00182"/>00182 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalEndProjected.x&#32;=&#32;(normalEndProjected.x&#32;+&#32;1.0f)&#32;*&#32;0.5f&#32;*&#32;(float)ScreenW;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00183"/>00183 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalEndProjected.y&#32;=&#32;(normalEndProjected.y&#32;+&#32;1.0f)&#32;*&#32;0.5f&#32;*&#32;(float)ScreenH;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00184"/>00184 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Draw&#32;the&#32;normal</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00185"/>00185 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_SetRenderDrawColor(renderer,&#32;255,&#32;0,&#32;0,&#32;255);&#32;//&#32;Red&#32;color&#32;for&#32;the&#32;normal</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00186"/>00186 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00187"/>00187 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;centerProjected:&#32;@&lt;%f,&#32;%f,&#32;%f&gt;@&quot;,&#32;centerProjected.x,&#32;centerProjected.y,&#32;centerProjected.z);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00188"/>00188 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;centerProjected:&#32;@&lt;%f,&#32;%f,&#32;%f&gt;@&quot;,&#32;normalSum.x,&#32;normalSum.y,&#32;normalSum.z);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00189"/>00189 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_RenderDrawLine(renderer,&#32;(int)centerProjected.x,&#32;(int)centerProjected.y,</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00190"/>00190 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(int)normalEndProjected.x,&#32;(int)normalEndProjected.y);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00191"/>00191 <emphasis role="comment">//</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00192"/>00192 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;normalSum;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00193"/>00193 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00194"/>00194 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00195"/><link linkend="_class_abstract_object3_d_1a3b7636e18a1f5624d8882da0c47458da">00195</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a3b7636e18a1f5624d8882da0c47458da">AbstractObject3D::DrawMeshTriangles</link>(SDL_Renderer*&#32;renderer,&#32;<link linkend="_struct_p_r_i_s_m___render_mode">PRISM_RenderMode</link>&#32;rm)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;Triangle_&#32;:&#32;<link linkend="_class_abstract_object3_d_1a4707653e32d90b220c3c6321f2666576">mesh</link>.tris)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_p_r_i_s_m___triangle">PRISM_Triangle</link>&#32;TriangleRotated,&#32;TriangleTranslated,&#32;TriangleScaled,&#32;TriangleProjected,&#32;TriangleViewed;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00198"/>00198 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleScaled&#32;=&#32;<link linkend="_class_abstract_object3_d_1a4b37b8ef005ab4f79090c4d87b326801">ScaleTriangle</link>(Triangle_);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleRotated&#32;=&#32;<link linkend="_class_abstract_object3_d_1a9371debf5f3a1c8e5c72503c1c173e64">RotateTriangle</link>(TriangleScaled);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleTranslated&#32;=&#32;<link linkend="_class_abstract_object3_d_1a33ee4ea92fb858c1e19a5a420ac13441">TranslateTriangle</link>(TriangleRotated);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleViewed&#32;=&#32;<link linkend="_class_abstract_object3_d_1ab9373b601dba85585b99518343d302ef">ViewTriangle</link>(TriangleTranslated);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;normal&#32;=&#32;<link linkend="_class_math_1ab0bf272d17220d425881009b75f5b769">Math::CalculateNormals</link>(TriangleViewed);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(normal.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;(TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.Coordinate.x)&#32;+
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;(TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.Coordinate.y)&#32;+
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;(TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;-&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.Coordinate.z)&#32;&lt;&#32;0.0f&#32;||&#32;rm.<link linkend="_struct_p_r_i_s_m___render_mode_1aa7f36a036a682ab453d8efbe796859a8">ShowBackMesh</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a4a0043af98800a2c0517cfe81c9423c6">ProjectionMatrix</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a4a0043af98800a2c0517cfe81c9423c6">ProjectionMatrix</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_math_1a65e451891ac1c4959ea5c8ade0a2724b">Math::MultiplyMatrixVector</link>(TriangleViewed.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a4a0043af98800a2c0517cfe81c9423c6">ProjectionMatrix</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+=&#32;1.0f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+=&#32;1.0f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+=&#32;1.0f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+=&#32;1.0f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+=&#32;1.0f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+=&#32;1.0f;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*=&#32;0.5f&#32;*&#32;(float)&#32;<link linkend="_class_abstract_object3_d_1a62a770b3680bca1269d59b9992144650">ScreenW</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*=&#32;0.5f&#32;*&#32;(float)&#32;<link linkend="_class_abstract_object3_d_1af273480bb7b551fe2359b8f4b23a084b">ScreenH</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*=&#32;0.5f&#32;*&#32;(float)&#32;<link linkend="_class_abstract_object3_d_1a62a770b3680bca1269d59b9992144650">ScreenW</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*=&#32;0.5f&#32;*&#32;(float)&#32;<link linkend="_class_abstract_object3_d_1af273480bb7b551fe2359b8f4b23a084b">ScreenH</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*=&#32;0.5f&#32;*&#32;(float)&#32;<link linkend="_class_abstract_object3_d_1a62a770b3680bca1269d59b9992144650">ScreenW</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*=&#32;0.5f&#32;*&#32;(float)&#32;<link linkend="_class_abstract_object3_d_1af273480bb7b551fe2359b8f4b23a084b">ScreenH</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&#32;light&#32;=&#32;{&#32;{&#32;0,&#32;5,&#32;-10},&#32;{&#32;255,&#32;255,&#32;255,&#32;255&#32;}};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;color&#32;=&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a751967452bc7aa83f729222132146b40">color</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rm.<link linkend="_struct_p_r_i_s_m___render_mode_1ae78bad4ce536f660c8a0b157be5d01d7">DisplayDimming1</link>){
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;l&#32;=&#32;sqrtf(light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;+
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;+
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;/=&#32;l;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;/=&#32;l;&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;/=&#32;l;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dp&#32;=&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;*&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;*&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;normal.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;*&#32;light.<link linkend="_struct_p_r_i_s_m___light_1a1378dc2f2b5bcf15f42bc37b36d05307">position</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;factor;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;dp;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;newR&#32;=&#32;color.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;*&#32;factor;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;newG&#32;=&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;*&#32;factor;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;newB&#32;=&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;*&#32;factor;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;newA&#32;=&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>&#32;*&#32;factor;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(newR&#32;&gt;&#32;255&#32;?&#32;255&#32;:&#32;newR);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(newG&#32;&gt;&#32;255&#32;?&#32;255&#32;:&#32;newG);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(newB&#32;&gt;&#32;255&#32;?&#32;255&#32;:&#32;newB);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(newA&#32;&gt;&#32;255&#32;?&#32;255&#32;:&#32;newA);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4]&#32;=&#32;{color.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>,&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>,&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>,&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4]&#32;=&#32;{color.<link linkend="_struct_p_r_i_s_m___color_1afd7b1ea9ff115205b65e0bffc92946ac">r</link>,&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a83576af39a9f289a28c1263d61073508">g</link>,&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a41cede1b4c0d05cff170ad5761f70964">b</link>,&#32;color.<link linkend="_struct_p_r_i_s_m___color_1a24420a9beaac7cee08b5e255a4c29db1">a</link>};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rm.<link linkend="_struct_p_r_i_s_m___render_mode_1a96b001d4cdcebf8d5dbcd0887ffb7784">FillMesh</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a27f9f71f5648aa4d40f3f76f831d0ac6">OldRasterisation</link>(TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleTranslated.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>,&#32;TriangleTranslated.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>,&#32;TriangleTranslated.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;renderer,&#32;light,&#32;rgba,&#32;rm);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00269"/>00269 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TileRasterisation(TriangleProjected.a.x,&#32;TriangleProjected.a.y,</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00270"/>00270 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.b.x,&#32;TriangleProjected.b.y,</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00271"/>00271 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.c.x,&#32;TriangleProjected.c.y,</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00272"/>00272 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleTranslated.a.z,&#32;TriangleTranslated.b.z,&#32;TriangleTranslated.c.z,</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00273"/>00273 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;renderer,&#32;light,&#32;rgba,&#32;rm);</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rm.<link linkend="_struct_p_r_i_s_m___render_mode_1a2dd74c2defd023489f80f3ceab3b96ce">DisplayTriangleContours</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;nullColor[4]&#32;=&#32;{0x00,&#32;0xFF,&#32;0x00,&#32;0xFF};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_p_r_i_s_m___painter_1a406c6cc8188e46a2254abf4febc5138b">PRISM_Painter::DrawTriangle</link>(TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a02dc0d7c61c618dfcd04550a232cc2fb">a</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1a940016c6b224e165a71d7d4550c333fa">b</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;TriangleProjected.<link linkend="_struct_p_r_i_s_m___triangle_1adf66705530d423a1598895870b2e0875">c</link>.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;renderer,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nullColor,&#32;rm.<link linkend="_struct_p_r_i_s_m___render_mode_1a9ff1fdb116c80da3ea34e79a6b541dfb">ContourWidth</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;clock_t&#32;start&#32;=&#32;clock();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00285"/>00285 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Camera.z_buffer.clear();</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;clock_t&#32;end&#32;=&#32;clock();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;seconds&#32;=&#32;(float)(end&#32;-&#32;start)&#32;/&#32;CLOCKS_PER_SEC&#32;*&#32;1000;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00288"/>00288 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00289"/>00289 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00290"/>00290 <emphasis role="comment">//&#32;Функция&#32;для&#32;вычисления&#32;барицентрических&#32;координат</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00291"/><link linkend="_class_abstract_object3_d_1a25b5a3ebd7fc24c26bb519aa2ed68c4b">00291</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a25b5a3ebd7fc24c26bb519aa2ed68c4b">AbstractObject3D::ComputeBarycentricCoords</link>(<emphasis role="keywordtype">float</emphasis>&#32;x,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;v0,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;v1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;v2,&#32;<emphasis role="keywordtype">float</emphasis>&amp;&#32;u,&#32;<emphasis role="keywordtype">float</emphasis>&amp;&#32;v,&#32;<emphasis role="keywordtype">float</emphasis>&amp;&#32;w)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;denom&#32;=&#32;(v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>)*(v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>)&#32;+&#32;(v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>)*(v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;u&#32;=&#32;((v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>)*(x&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>)&#32;+&#32;(v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>)*(y&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>))&#32;/&#32;denom;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;v&#32;=&#32;((v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;-&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>)*(x&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>)&#32;+&#32;(v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>)*(y&#32;-&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>))&#32;/&#32;denom;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;w&#32;=&#32;1.0f&#32;-&#32;u&#32;-&#32;v;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;u&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;v&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;w&#32;&gt;=&#32;0;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00297"/>00297 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00298"/>00298 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00299"/>00299 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00300"/><link linkend="_class_abstract_object3_d_1a27f9f71f5648aa4d40f3f76f831d0ac6">00300</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a27f9f71f5648aa4d40f3f76f831d0ac6">AbstractObject3D::OldRasterisation</link>(<emphasis role="keywordtype">int</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y3,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z3,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Renderer*&#32;SDL_renderer,&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&#32;light,&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4],&#32;<link linkend="_struct_p_r_i_s_m___render_mode">PRISM_RenderMode</link>&#32;RendMode)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v0&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z1)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v1&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z2)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v2&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z3)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;normal&#32;=&#32;<link linkend="_class_math_1ab0bf272d17220d425881009b75f5b769">Math::CalculateNormals</link>({v0,&#32;v1,&#32;v2});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;viewDir&#32;=&#32;{0,&#32;0,&#32;1};&#32;&#32;<emphasis role="comment">//&#32;Assuming&#32;the&#32;camera&#32;looks&#32;along&#32;the&#32;negative&#32;Z&#32;axis</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___color">PRISM_Color</link>&#32;color0,&#32;color1,&#32;color2;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1a720a198ab315710c67ebe7b23e75389c">DisplayDimming2</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;color&#32;at&#32;each&#32;vertex</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Замер&#32;времени</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;start&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;bounding&#32;box&#32;of&#32;the&#32;triangle</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minX&#32;=&#32;std::min({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxX&#32;=&#32;std::max({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minY&#32;=&#32;std::min({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxY&#32;=&#32;std::max({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00323"/>00323 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(minY));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;&lt;=&#32;static_cast&lt;int&gt;(std::floor(maxY));&#32;++y)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(minX));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;&lt;=&#32;static_cast&lt;int&gt;(std::floor(maxX));&#32;++x)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;u,&#32;v,&#32;w;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_abstract_object3_d_1a25b5a3ebd7fc24c26bb519aa2ed68c4b">ComputeBarycentricCoords</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y),&#32;v0,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v1,&#32;v2,&#32;u,&#32;v,&#32;w))&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;z&#32;=&#32;u&#32;*&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;v&#32;*&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;w&#32;*&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.get(x,&#32;y)&#32;|&#32;!RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1ac0843b69ebe3f8706641d775c456bf00">Z_Buffer</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;r&#32;=&#32;rgba[0];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;g&#32;=&#32;rgba[1];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;b&#32;=&#32;rgba[2];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;a&#32;=&#32;rgba[3];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1a720a198ab315710c67ebe7b23e75389c">DisplayDimming2</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00341"/>00341 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_SetRenderDrawColor(SDL_renderer,&#32;r,&#32;g,&#32;b,&#32;a);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_RenderDrawPoint(SDL_renderer,&#32;x,&#32;y);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.update(x,&#32;y,&#32;z);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;end&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;std::chrono::duration&lt;double,&#32;std::milli&gt;&#32;duration&#32;=&#32;end&#32;-&#32;start;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Вывод&#32;времени&#32;через&#32;SDL_Log</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;SDL_Log(<emphasis role="stringliteral">&quot;Время&#32;выполнения:&#32;%.3f&#32;мс&quot;</emphasis>,&#32;duration.count());
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00354"/>00354 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00355"/>00355 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00356"/><link linkend="_class_abstract_object3_d_1aa45a8a5bb80b410f2fbd28f15e3f477e">00356</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1aa45a8a5bb80b410f2fbd28f15e3f477e">AbstractObject3D::OptimizedEdgeRasterization</link>(<emphasis role="keywordtype">int</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y3,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z3,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Renderer*&#32;SDL_renderer,&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&#32;light,&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4],&#32;<link linkend="_struct_p_r_i_s_m___render_mode">PRISM_RenderMode</link>&#32;RendMode)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v0&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z1)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v1&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z2)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v2&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z3)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Сортировка&#32;вершин&#32;по&#32;y&#32;(v0.y&#32;&lt;=&#32;v1.y&#32;&lt;=&#32;v2.y)</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;&lt;&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>)&#32;std::swap(v0,&#32;v1);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;&lt;&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>)&#32;std::swap(v0,&#32;v2);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>&#32;&lt;&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>)&#32;std::swap(v1,&#32;v2);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Функция&#32;для&#32;интерполяции&#32;X-координаты&#32;по&#32;рёбрам&#32;треугольника</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;interpolateX&#32;=&#32;[](<emphasis role="keywordtype">float</emphasis>&#32;x0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y)&#32;-&gt;&#32;<emphasis role="keywordtype">float</emphasis>&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y0&#32;==&#32;y1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;x0;&#32;<emphasis role="comment">//&#32;Избегаем&#32;деления&#32;на&#32;ноль</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x0&#32;+&#32;(x1&#32;-&#32;x0)&#32;*&#32;(y&#32;-&#32;y0)&#32;/&#32;(y1&#32;-&#32;y0);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Инкрементальная&#32;растеризация:&#32;делим&#32;треугольник&#32;на&#32;два&#32;части&#32;(верхняя&#32;и&#32;нижняя)</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rasterize_half&#32;=&#32;[&amp;](<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v0,&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v1,&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v2)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>));&#32;y&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::floor(v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>));&#32;++y)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;xStart&#32;=&#32;interpolateX(v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;y);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;xEnd&#32;=&#32;interpolateX(v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;y);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xStart&#32;&gt;&#32;xEnd)&#32;std::swap(xStart,&#32;xEnd);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(xStart));&#32;x&#32;&lt;=&#32;static_cast&lt;int&gt;(std::floor(xEnd));&#32;++x)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;u,&#32;v,&#32;w;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_abstract_object3_d_1a25b5a3ebd7fc24c26bb519aa2ed68c4b">ComputeBarycentricCoords</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y),&#32;v0,&#32;v1,&#32;v2,&#32;u,&#32;v,&#32;w))&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;z&#32;=&#32;u&#32;*&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;v&#32;*&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;w&#32;*&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.get(x,&#32;y)&#32;||&#32;!RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1ac0843b69ebe3f8706641d775c456bf00">Z_Buffer</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;r&#32;=&#32;rgba[0];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;g&#32;=&#32;rgba[1];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;b&#32;=&#32;rgba[2];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;a&#32;=&#32;rgba[3];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_SetRenderDrawColor(SDL_renderer,&#32;r,&#32;g,&#32;b,&#32;a);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_RenderDrawPoint(SDL_renderer,&#32;x,&#32;y);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.update(x,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;Обновляем&#32;Z-буфер</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Растеризуем&#32;верхний&#32;и&#32;нижний&#32;треугольники</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;rasterize_half(v0,&#32;v1,&#32;v2);&#32;&#32;<emphasis role="comment">//&#32;Нижняя&#32;часть&#32;треугольника</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;rasterize_half(v1,&#32;v1,&#32;v2);&#32;&#32;<emphasis role="comment">//&#32;Верхняя&#32;часть</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00398"/>00398 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00399"/>00399 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00400"/>00400 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00401"/>00401 <emphasis role="comment">//&#32;Обертка&#32;для&#32;вызова&#32;растеризации&#32;в&#32;отдельном&#32;потоке</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00402"/><link linkend="_class_abstract_object3_d_1a4e726fabc7e6a8c043a91c8b573a26cd">00402</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a4e726fabc7e6a8c043a91c8b573a26cd">AbstractObject3D::RasterizeTile</link>(<emphasis role="keywordtype">int</emphasis>&#32;minX,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxX,&#32;<emphasis role="keywordtype">int</emphasis>&#32;minY,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxY,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;v0,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;v1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&amp;&#32;v2,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Renderer*&#32;SDL_renderer,&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&#32;light,&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4],
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___render_mode">PRISM_RenderMode</link>&#32;RendMode,&#32;std::vector&lt;SDL_Surface*&gt;&amp;&#32;surfaces)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;std::mutex&#32;render_mutex;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Создание&#32;поверхности&#32;для&#32;текущего&#32;тайла</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;SDL_Surface*&#32;RasterSurface&#32;=&#32;SDL_CreateRGBSurface(0,&#32;maxX&#32;-&#32;minX&#32;+&#32;1,&#32;maxY&#32;-&#32;minY&#32;+&#32;1,&#32;32,&#32;0x00FF0000,&#32;0x0000FF00,&#32;0x000000FF,&#32;0xFF000000);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SDL_LockSurface(RasterSurface)&#32;!=&#32;0)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(<emphasis role="stringliteral">&quot;Unable&#32;to&#32;lock&#32;surface:&#32;%s&quot;</emphasis>,&#32;SDL_GetError());
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_FreeSurface(RasterSurface);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00415"/>00415 &#32;&#32;&#32;&#32;Uint32*&#32;pixels&#32;=&#32;(Uint32*)RasterSurface-&gt;pixels;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00416"/>00416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;minY;&#32;y&#32;&lt;=&#32;maxY;&#32;++y)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;minX;&#32;x&#32;&lt;=&#32;maxX;&#32;++x)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;u,&#32;v,&#32;w;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_abstract_object3_d_1a25b5a3ebd7fc24c26bb519aa2ed68c4b">ComputeBarycentricCoords</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y),&#32;v0,&#32;v1,&#32;v2,&#32;u,&#32;v,&#32;w))&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;z&#32;=&#32;u&#32;*&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;v&#32;*&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;w&#32;*&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;render_mutex.lock();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;z_buff_point&#32;=&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.get(x,&#32;y);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;z_buff_point&#32;|&#32;!RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1ac0843b69ebe3f8706641d775c456bf00">Z_Buffer</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;r&#32;=&#32;rgba[0];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;g&#32;=&#32;rgba[1];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;b&#32;=&#32;rgba[2];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;a&#32;=&#32;rgba[3];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1a720a198ab315710c67ebe7b23e75389c">DisplayDimming2</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Применение&#32;затемнения,&#32;если&#32;это&#32;необходимо</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint32&#32;color&#32;=&#32;SDL_MapRGB(RasterSurface-&gt;format,&#32;r,&#32;g,&#32;b);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pixels[(y&#32;-&#32;minY)&#32;*&#32;RasterSurface-&gt;w&#32;+&#32;(x&#32;-&#32;minX)]&#32;=&#32;color;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.update(x,&#32;y,&#32;z);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;render_mutex.unlock();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00443"/>00443 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;SDL_UnlockSurface(RasterSurface);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;render_mutex.lock();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;surfaces.push_back(RasterSurface);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;render_mutex.unlock();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00449"/>00449 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00450"/>00450 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00451"/>00451 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00452"/><link linkend="_class_abstract_object3_d_1ac9ea7e204516960688ab4458ef1b7253">00452</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1ac9ea7e204516960688ab4458ef1b7253">AbstractObject3D::Rasterisation</link>(<emphasis role="keywordtype">int</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y3,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z3,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Renderer*&#32;SDL_renderer,&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&#32;light,&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4],&#32;<link linkend="_struct_p_r_i_s_m___render_mode">PRISM_RenderMode</link>&#32;RendMode)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v0&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z1)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v1&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z2)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v2&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z3)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;normal&#32;=&#32;<link linkend="_class_math_1ab0bf272d17220d425881009b75f5b769">Math::CalculateNormals</link>({v0,&#32;v1,&#32;v2});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;viewDir&#32;=&#32;{0,&#32;0,&#32;1};&#32;&#32;<emphasis role="comment">//&#32;Предполагается,&#32;что&#32;камера&#32;смотрит&#32;вдоль&#32;отрицательной&#32;оси&#32;Z</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00459"/>00459 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00460"/>00460 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Вычисление&#32;ограничивающего&#32;прямоугольника&#32;треугольника</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00461"/>00461 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minX&#32;=&#32;std::min({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00462"/>00462 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxX&#32;=&#32;std::max({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minY&#32;=&#32;std::min({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxY&#32;=&#32;std::max({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Делим&#32;область&#32;на&#32;4&#32;части</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;midX&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((minX&#32;+&#32;maxX)&#32;/&#32;2);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00468"/>00468 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;midY&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((minY&#32;+&#32;maxY)&#32;/&#32;2);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00470"/>00470 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Векторы&#32;потоков</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00471"/>00471 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::thread&gt;&#32;threads;</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00472"/>00472 &#32;&#32;&#32;&#32;std::vector&lt;SDL_Surface*&gt;&#32;surfaces;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00473"/>00473 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Запускаем&#32;4&#32;потока&#32;для&#32;обработки&#32;четырех&#32;квадрантов</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;std::thread&#32;ta(&amp;<link linkend="_class_abstract_object3_d_1a4e726fabc7e6a8c043a91c8b573a26cd">AbstractObject3D::RasterizeTile</link>,&#32;<emphasis role="keyword">this</emphasis>,&#32;minX,&#32;midX,&#32;minY,&#32;midY,&#32;v0,&#32;v1,&#32;v2,&#32;SDL_renderer,&#32;light,&#32;rgba,&#32;RendMode,&#32;std::ref(surfaces));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00476"/>00476 &#32;&#32;&#32;&#32;std::thread&#32;tb(&amp;<link linkend="_class_abstract_object3_d_1a4e726fabc7e6a8c043a91c8b573a26cd">AbstractObject3D::RasterizeTile</link>,&#32;<emphasis role="keyword">this</emphasis>,&#32;midX&#32;+&#32;1,&#32;maxX,&#32;minY,&#32;midY,&#32;v0,&#32;v1,&#32;v2,&#32;SDL_renderer,&#32;light,&#32;rgba,&#32;RendMode,&#32;std::ref(surfaces));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00477"/>00477 &#32;&#32;&#32;&#32;std::thread&#32;tc(&amp;<link linkend="_class_abstract_object3_d_1a4e726fabc7e6a8c043a91c8b573a26cd">AbstractObject3D::RasterizeTile</link>,&#32;<emphasis role="keyword">this</emphasis>,&#32;minX,&#32;midX,&#32;midY&#32;+&#32;1,&#32;maxY,&#32;v0,&#32;v1,&#32;v2,&#32;SDL_renderer,&#32;light,&#32;rgba,&#32;RendMode,&#32;std::ref(surfaces));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00478"/>00478 &#32;&#32;&#32;&#32;std::thread&#32;td(&amp;<link linkend="_class_abstract_object3_d_1a4e726fabc7e6a8c043a91c8b573a26cd">AbstractObject3D::RasterizeTile</link>,&#32;<emphasis role="keyword">this</emphasis>,&#32;midX&#32;+&#32;1,&#32;maxX,&#32;midY&#32;+&#32;1,&#32;maxY,&#32;v0,&#32;v1,&#32;v2,&#32;SDL_renderer,&#32;light,&#32;rgba,&#32;RendMode,&#32;std::ref(surfaces));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00479"/>00479 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00480"/>00480 &#32;&#32;&#32;&#32;ta.join();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;tb.join();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;tc.join();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;td.join();
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ждем&#32;завершения&#32;всех&#32;потоков</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00486"/>00486 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(auto&amp;&#32;t&#32;:&#32;threads)&#32;{</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00487"/>00487 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.join();</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00488"/>00488 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;surfIndex&#32;=&#32;0;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Теперь&#32;surfaces&#32;содержит&#32;surface,&#32;созданные&#32;в&#32;потоках</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(SDL_Surface*&#32;surface&#32;:&#32;surfaces)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Создание&#32;текстуры&#32;из&#32;поверхности</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Texture*&#32;texture&#32;=&#32;SDL_CreateTextureFromSurface(SDL_renderer,&#32;surface);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Освобождение&#32;поверхности</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_FreeSurface(surface);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Rect&#32;dstrect;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(surfIndex)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstrect&#32;=&#32;{(int)minX,&#32;(<emphasis role="keywordtype">int</emphasis>)minY,&#32;(int)midX&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)minX,&#32;(int)midY&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)minY};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstrect&#32;=&#32;{(int)midX&#32;+&#32;1,&#32;(<emphasis role="keywordtype">int</emphasis>)minY,&#32;(int)maxX&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)midX&#32;+&#32;1,&#32;(int)midY&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)minY};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstrect&#32;=&#32;{(int)minX,&#32;(<emphasis role="keywordtype">int</emphasis>)midY&#32;+&#32;1,&#32;(int)midX&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)minX,&#32;(int)maxY&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)midY&#32;+&#32;1};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstrect&#32;=&#32;{(int)midX&#32;+&#32;1,&#32;(<emphasis role="keywordtype">int</emphasis>)midY&#32;+&#32;1,&#32;(int)maxX&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)midX&#32;+&#32;1,&#32;(int)maxY&#32;-&#32;(<emphasis role="keywordtype">int</emphasis>)midY&#32;+&#32;1};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_RenderCopy(SDL_renderer,&#32;texture,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;&amp;dstrect);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_DestroyTexture(texture);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;surfIndex++;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00518"/>00518 }
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00519"/>00519 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00520"/><link linkend="_class_abstract_object3_d_1a76994705915683e5dabc53a835b04af1">00520</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_abstract_object3_d_1a76994705915683e5dabc53a835b04af1">AbstractObject3D::TileRasterisation</link>(<emphasis role="keywordtype">int</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y3,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;z1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;z3,&#32;SDL_Renderer*&#32;SDL_renderer,
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___light">PRISM_Light</link>&#32;light,&#32;<emphasis role="keywordtype">short</emphasis>&#32;rgba[4],&#32;<link linkend="_struct_p_r_i_s_m___render_mode">PRISM_RenderMode</link>&#32;RendMode)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v0&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z1)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v1&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y2),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z2)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;v2&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y3),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(z3)};
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;normal&#32;and&#32;other&#32;necessary&#32;values</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;normal&#32;=&#32;<link linkend="_class_math_1ab0bf272d17220d425881009b75f5b769">Math::CalculateNormals</link>({v0,&#32;v1,&#32;v2});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;<link linkend="_struct_p_r_i_s_m___vector3d">PRISM_Vector3d</link>&#32;viewDir&#32;=&#32;{0,&#32;0,&#32;1};&#32;&#32;<emphasis role="comment">//&#32;Assuming&#32;the&#32;camera&#32;looks&#32;along&#32;the&#32;negative&#32;Z&#32;axis</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00530"/>00530 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;bounding&#32;box&#32;of&#32;the&#32;triangle</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minX&#32;=&#32;std::min({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxX&#32;=&#32;std::max({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1ad0da36b2558901e21e7a30f6c227a45e">x</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minY&#32;=&#32;std::min({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00535"/>00535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxY&#32;=&#32;std::max({v0.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>,&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1aa4f0d3eebc3c443f9be81bf48561a217">y</link>});
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00537"/>00537 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Размер&#32;плитки</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00538"/>00538 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;tileSize&#32;=&#32;32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00539"/>00539 &#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00540"/>00540 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Обработка&#32;каждого&#32;блока&#32;(плитки)</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;tileY&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::floor(minY))&#32;/&#32;tileSize;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tileY&#32;&lt;=&#32;static_cast&lt;int&gt;(std::floor(maxY))&#32;/&#32;tileSize;&#32;++tileY)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;tileX&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::floor(minX))&#32;/&#32;tileSize;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tileX&#32;&lt;=&#32;static_cast&lt;int&gt;(std::floor(maxX))&#32;/&#32;tileSize;&#32;++tileX)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Координаты&#32;плитки&#32;в&#32;пространстве&#32;экрана</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tileStartX&#32;=&#32;tileX&#32;*&#32;tileSize;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tileStartY&#32;=&#32;tileY&#32;*&#32;tileSize;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tileEndX&#32;=&#32;tileStartX&#32;+&#32;tileSize&#32;-&#32;1;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tileEndY&#32;=&#32;tileStartY&#32;+&#32;tileSize&#32;-&#32;1;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00551"/>00551 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ограничиваем&#32;плитку&#32;по&#32;границам&#32;треугольника</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tileStartX&#32;=&#32;std::max(tileStartX,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(minX)));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tileEndX&#32;=&#32;std::min(tileEndX,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::floor(maxX)));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tileStartY&#32;=&#32;std::max(tileStartY,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::ceil(minY)));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tileEndY&#32;=&#32;std::min(tileEndY,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::floor(maxY)));
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Теперь&#32;проходим&#32;по&#32;каждому&#32;пикселю&#32;внутри&#32;плитки</emphasis>
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;tileStartY;&#32;y&#32;&lt;=&#32;tileEndY;&#32;++y)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;tileStartX;&#32;x&#32;&lt;=&#32;tileEndX;&#32;++x)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;u,&#32;v,&#32;w;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_abstract_object3_d_1a25b5a3ebd7fc24c26bb519aa2ed68c4b">ComputeBarycentricCoords</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(x),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(y),&#32;v0,&#32;v1,&#32;v2,&#32;u,&#32;v,&#32;w))&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;z&#32;=&#32;u&#32;*&#32;v0.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;v&#32;*&#32;v1.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>&#32;+&#32;w&#32;*&#32;v2.<link linkend="_struct_p_r_i_s_m___vector3d_1af73583b1e980b0aa03f9884812e9fd4d">z</link>;
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.get(x,&#32;y)&#32;||&#32;!RendMode.<link linkend="_struct_p_r_i_s_m___render_mode_1ac0843b69ebe3f8706641d775c456bf00">Z_Buffer</link>)&#32;{
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;r&#32;=&#32;rgba[0];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;g&#32;=&#32;rgba[1];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;b&#32;=&#32;rgba[2];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uint8&#32;a&#32;=&#32;rgba[3];
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00569"/>00569 
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_SetRenderDrawColor(SDL_renderer,&#32;r,&#32;g,&#32;b,&#32;a);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_RenderDrawPoint(SDL_renderer,&#32;x,&#32;y);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_abstract_object3_d_1a1320848696d06579795689c5e5ee4db9">Camera</link>.z_buffer.update(x,&#32;y,&#32;z);
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_object3_d_8cpp_source_1l00579"/>00579 }
</programlisting></section>
