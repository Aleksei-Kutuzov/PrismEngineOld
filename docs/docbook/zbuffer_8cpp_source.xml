<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_zbuffer_8cpp_source" xml:lang="ru">
<title>zbuffer.cpp</title>
<indexterm><primary>C:/Users/Admin/Desktop/PrismEngine/PrismEngine/src/PRISM_rendering/zbuffer.cpp</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="_zbuffer_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;SDL.h&gt;</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_zbuffer_8h">zbuffer.h</link>&quot;</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00005"/>00005 
<anchor xml:id="_zbuffer_8cpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;Конструктор</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00007"/><link linkend="_class_z___buffer_1a00b98023cc45ef0097d2dced362728c8">00007</link> <link linkend="_class_z___buffer_1a00b98023cc45ef0097d2dced362728c8">Z_Buffer::Z_Buffer</link>(<emphasis role="keywordtype">int</emphasis>&#32;screenW,&#32;<emphasis role="keywordtype">int</emphasis>&#32;screenH)&#32;:&#32;ScreenW(screenW),&#32;ScreenH(screenH),
<anchor xml:id="_zbuffer_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zMatrix(screenW&#32;*&#32;screenH,&#32;std::numeric_limits&lt;int&gt;::max()),
<anchor xml:id="_zbuffer_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zMatrixСleared(screenW&#32;*&#32;screenH,&#32;std::numeric_limits&lt;int&gt;::max())&#32;{}
<anchor xml:id="_zbuffer_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_zbuffer_8cpp_source_1l00011"/>00011 <emphasis role="comment">//&#32;Метод&#32;для&#32;обновления&#32;Z-буфера</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00012"/>00012 <emphasis role="keywordtype">void</emphasis>&#32;Z_Buffer::Z_Buffer::update(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)&#32;{
<anchor xml:id="_zbuffer_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;x&#32;&lt;&#32;ScreenW&#32;&amp;&amp;&#32;y&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;y&#32;&lt;&#32;ScreenH)&#32;{
<anchor xml:id="_zbuffer_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zMatrix[x&#32;+&#32;y&#32;*&#32;ScreenW]&#32;=&#32;z;
<anchor xml:id="_zbuffer_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zbuffer_8cpp_source_1l00016"/>00016 }
<anchor xml:id="_zbuffer_8cpp_source_1l00017"/>00017 
<anchor xml:id="_zbuffer_8cpp_source_1l00018"/>00018 <emphasis role="comment">//&#32;Метод&#32;для&#32;получения&#32;значения&#32;Z-буфера</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00019"/><link linkend="_class_z___buffer_1a7c0d937857543bccbcd49027556e8545">00019</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_z___buffer_1a7c0d937857543bccbcd49027556e8545">Z_Buffer::get</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_zbuffer_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;x&#32;&lt;&#32;ScreenW&#32;&amp;&amp;&#32;y&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;y&#32;&lt;&#32;ScreenH)&#32;{
<anchor xml:id="_zbuffer_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zMatrix[x&#32;+&#32;y&#32;*&#32;ScreenW];
<anchor xml:id="_zbuffer_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_zbuffer_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;int&gt;::max();
<anchor xml:id="_zbuffer_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zbuffer_8cpp_source_1l00025"/>00025 
<anchor xml:id="_zbuffer_8cpp_source_1l00026"/><link linkend="_class_z___buffer_1a30e6880d1e5a38506410342f7ee92595">00026</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_z___buffer_1a30e6880d1e5a38506410342f7ee92595">Z_Buffer::clear</link>(SDL_Renderer&#32;*&#32;renderer){
<anchor xml:id="_zbuffer_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fill(zMatrix.begin(),&#32;zMatrix.end(),&#32;std::numeric_limits&lt;int&gt;::max());
<anchor xml:id="_zbuffer_8cpp_source_1l00028"/>00028 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_Log(&quot;Clear&#32;z_buffer&quot;);</emphasis>
<anchor xml:id="_zbuffer_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_zbuffer_8cpp_source_1l00030"/>00030 }
</programlisting></section>
